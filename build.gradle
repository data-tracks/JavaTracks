plugins {
    id 'java'
    // MIT
    id "io.freefair.lombok" version "8.10.2"
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

java {
    sourceCompatibility = 1.16
    targetCompatibility = 1.16
}


group = 'dev.datatracks'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // Apache 2.0
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.18.1'
    // Apache 2.0
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.18.1'
    // Apache 2.0
    implementation group: 'com.google.flatbuffers', name: 'flatbuffers-java', version: '24.3.25'
    // Apache 2.0
    compileOnly 'org.jetbrains:annotations:26.0.2'


// Testing
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorPath = configurations.annotationProcessor
}

tasks.register('copyProtocol', Copy) {
    dependsOn(":generateEffectiveLombokConfig")

    from "protocol/generated/java/protocol"
    into layout.buildDirectory.dir("generated/flatbuffers").get().asFile
}

compileJava.dependsOn copyProtocol

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/flatbuffers"  // Adds generated FlatBuffers classes to Java source
        }
    }
}

test {
    useJUnitPlatform()
}

jar {
    archiveBaseName = 'JavaTracks'
    archiveVersion = '0.0.1'
    archiveFileName = 'javatracks.jar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = project.name
            version = project.version

            pom {
                name = 'Your Library Name'
                description = 'A short description of your library.'
                url = 'https://github.com/your-org/your-repo' // Your project URL
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yourusername'
                        name = 'Your Name'
                        email = 'your@email.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/your-org/your-repo.git'
                    developerConnection = 'scm:git:ssh://github.com:your-org/your-repo.git'
                    url = 'https://github.com/your-org/your-repo'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            def snapshotsRepoUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty('ossrhUsername') ? project.ossrhUsername : System.getenv('OSSRH_USERNAME')
                password = project.hasProperty('ossrhPassword') ? project.ossrhPassword : System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    // Ensure you have GPG_TTY set if running in CI/CD without direct tty
    // Or use system environment variables for private key and passphrase
    useInMemoryPgpKeys(rootProject.ext.get('signing.keyId'), rootProject.ext.get('signing.password'), rootProject.ext.get('signing.secretKeyRingFile'))
    // OR simpler for local/CI (requires GPG agent/GPG_TTY setup for passphrase)
    // useGpgCmd()
}
